name: All Builds (Linux, macOS, Windows, Android, IPA, APK, AAB)
// Below is the base structure for the Android application that includes all features and enhancements.

// MainActivity.kt
package com.example.qurantafsir

import android.Manifest
import android.app.DownloadManager
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.os.Handler
import android.os.Looper
import android.widget.Button
import android.widget.ProgressBar
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import java.io.File

class MainActivity : AppCompatActivity() {

    private val tafsirUrls = mapOf(
        "تفسير ابن كثير" to "https://example.com/ibn_kathir.json",
        "تفسير الجلالين" to "https://example.com/jalalain.json",
        "تفسير القرطبي" to "https://example.com/qurtubi.json"
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Check storage permissions
        checkStoragePermissions()

        val selectTafsirButton = findViewById<Button>(R.id.selectTafsirButton)
        selectTafsirButton.setOnClickListener {
            showTafsirOptions()
        }

        val cleanUpButton = findViewById<Button>(R.id.cleanUpButton)
        cleanUpButton.setOnClickListener {
            cleanUpOldFiles()
        }
    }

    private fun checkStoragePermissions() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this, arrayOf(
                    Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    Manifest.permission.READ_EXTERNAL_STORAGE
                ), 1001)
            }
        }
    }

    private fun showTafsirOptions() {
        val tafsirOptions = tafsirUrls.keys.toTypedArray()
        val builder = AlertDialog.Builder(this)
        builder.setTitle("اختر نوع التفسير")
        builder.setItems(tafsirOptions) { _, which ->
            val tafsirType = tafsirOptions[which]
            downloadTafsir(tafsirType)
        }
        builder.show()
    }

    private fun downloadTafsir(tafsirType: String) {
        Toast.makeText(this, "جارٍ تحميل تفسير $tafsirType...", Toast.LENGTH_SHORT).show()

        val tafsirUrl = tafsirUrls[tafsirType] ?: ""

        if (tafsirUrl.isNotEmpty()) {
            downloadFromUrl(tafsirUrl, tafsirType)
        } else {
            Toast.makeText(this, "الرابط غير متوفر", Toast.LENGTH_SHORT).show()
        }
    }

    private fun downloadFromUrl(url: String, tafsirType: String) {
        val progressBar = findViewById<ProgressBar>(R.id.progressBar)
        progressBar.visibility = ProgressBar.VISIBLE

        val fileName = "$tafsirType.json"
        val destinationFile = File(filesDir, fileName)

        val request = DownloadManager.Request(Uri.parse(url))
        request.setTitle("تحميل تفسير $tafsirType")
        request.setDescription("جاري تحميل التفسير...")
        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
        request.setDestinationUri(Uri.fromFile(destinationFile))

        val downloadManager = getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager
        downloadManager.enqueue(request)

        Handler(Looper.getMainLooper()).postDelayed({
            progressBar.visibility = ProgressBar.GONE
            Toast.makeText(this, "تم تحميل تفسير $tafsirType", Toast.LENGTH_SHORT).show()
        }, 3000)
    }

    private fun cleanUpOldFiles() {
        val files = filesDir.listFiles() ?: return
        for (file in files) {
            if (file.name.endsWith(".json")) {
                file.delete()
            }
        }
        Toast.makeText(this, "تم تنظيف الملفات القديمة", Toast.LENGTH_SHORT).show()
    }
}
